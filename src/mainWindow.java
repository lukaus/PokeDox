/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainWindow;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import static java.awt.Image.SCALE_DEFAULT;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.CellEditorListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author Lukaus
 */


public class mainWindow extends javax.swing.JFrame {

    static boolean needsToSave = false;

    /**
     * Creates new form mainWindow
     */
    
    PokeList pokeList = new PokeList();
    public mainWindow() {
        initComponents(); 
        this.setIconImage(new ImageIcon(getClass().getResource("PokeBall_icon.png")).getImage()); 
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allOrEvoFamRadioSelectionGroup = new javax.swing.ButtonGroup();
        regionFilterPanel = new javax.swing.JPanel();
        regionLabel = new javax.swing.JLabel();
        kantoCheck = new javax.swing.JCheckBox();
        johtoCheck = new javax.swing.JCheckBox();
        hoennCheck = new javax.swing.JCheckBox();
        sinnohCheck = new javax.swing.JCheckBox();
        unovaCheck = new javax.swing.JCheckBox();
        kalosCheck = new javax.swing.JCheckBox();
        allRegionButton = new javax.swing.JButton();
        noRegionButton = new javax.swing.JButton();
        collectionFilterPanel = new javax.swing.JPanel();
        collectionLabel = new javax.swing.JLabel();
        caughtCheck = new javax.swing.JCheckBox();
        wantCheck = new javax.swing.JCheckBox();
        multiHaveCheck = new javax.swing.JCheckBox();
        seenCheck = new javax.swing.JCheckBox();
        tradeCheck = new javax.swing.JCheckBox();
        allCollectionButton = new javax.swing.JButton();
        noCollectionButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        questionMarkLabel = new javax.swing.JLabel();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        creditsLabel = new javax.swing.JLabel();
        iconPanel = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        pokeList = new PokeList();
        pokeTable = new javax.swing.JTable(pokeList)
        ;
        typeFiltersPanel = new javax.swing.JPanel();
        typeFiltersLabel = new javax.swing.JLabel();
        normalBox = new javax.swing.JCheckBox();
        fireBox = new javax.swing.JCheckBox();
        groundBox = new javax.swing.JCheckBox();
        psychicBox = new javax.swing.JCheckBox();
        fightingBox = new javax.swing.JCheckBox();
        waterBox = new javax.swing.JCheckBox();
        rockBox = new javax.swing.JCheckBox();
        iceBox = new javax.swing.JCheckBox();
        flyingBox = new javax.swing.JCheckBox();
        grassBox = new javax.swing.JCheckBox();
        bugBox = new javax.swing.JCheckBox();
        dragonBox = new javax.swing.JCheckBox();
        poisonBox = new javax.swing.JCheckBox();
        electricBox = new javax.swing.JCheckBox();
        ghostBox = new javax.swing.JCheckBox();
        darkBox = new javax.swing.JCheckBox();
        steelBox = new javax.swing.JCheckBox();
        fairyBox = new javax.swing.JCheckBox();
        allTypeButton = new javax.swing.JButton();
        noTypeButton = new javax.swing.JButton();
        strictBox = new javax.swing.JCheckBox();
        singleOnlyBox = new javax.swing.JCheckBox();
        dualOnlyBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        selectionPanel = new javax.swing.JPanel();
        selectedLabel = new javax.swing.JLabel();
        setCaughtBox = new javax.swing.JCheckBox();
        markWantBox = new javax.swing.JCheckBox();
        markTradeBox = new javax.swing.JCheckBox();
        markSeenBox = new javax.swing.JCheckBox();
        markWantButton = new javax.swing.JButton();
        markCaughtButton = new javax.swing.JButton();
        markNotSeenButton = new javax.swing.JButton();
        markNotTradeButton = new javax.swing.JButton();
        setMultipleField = new javax.swing.JTextField();
        setMultipleButton = new javax.swing.JButton();
        selectionAllButton = new javax.swing.JButton();
        pokePicPanel = new javax.swing.JPanel();
        imgLabel = new javax.swing.JLabel();
        pokePicLabel = new javax.swing.JLabel();
        selectedPokemonLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        allPokemonButton = new javax.swing.JRadioButton();
        evoFamButton = new javax.swing.JRadioButton();
        saveButton = new javax.swing.JButton();
        pokeCountLabel = new javax.swing.JLabel();
        pokeCountOutLabel = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pok√©Dox");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("mainFrame"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        regionFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        regionLabel.setText("Region Filters");
        regionLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        kantoCheck.setSelected(true);
        kantoCheck.setText("Kanto");
        kantoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        johtoCheck.setSelected(true);
        johtoCheck.setText("Johto");
        johtoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        hoennCheck.setSelected(true);
        hoennCheck.setText("Hoenn");
        hoennCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        sinnohCheck.setSelected(true);
        sinnohCheck.setText("Sinnoh");
        sinnohCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        unovaCheck.setSelected(true);
        unovaCheck.setText("Unova");
        unovaCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        kalosCheck.setSelected(true);
        kalosCheck.setText("Kalos");
        kalosCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        allRegionButton.setText("Select All");
        allRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRegionButtonActionPerformed(evt);
            }
        });

        noRegionButton.setText("Select None");
        noRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noRegionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout regionFilterPanelLayout = new javax.swing.GroupLayout(regionFilterPanel);
        regionFilterPanel.setLayout(regionFilterPanelLayout);
        regionFilterPanelLayout.setHorizontalGroup(
            regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regionFilterPanelLayout.createSequentialGroup()
                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regionLabel)
                    .addGroup(regionFilterPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(regionFilterPanelLayout.createSequentialGroup()
                                .addComponent(allRegionButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noRegionButton))
                            .addGroup(regionFilterPanelLayout.createSequentialGroup()
                                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(kantoCheck)
                                    .addComponent(sinnohCheck))
                                .addGap(18, 18, 18)
                                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(unovaCheck)
                                    .addComponent(johtoCheck))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(kalosCheck)
                                    .addComponent(hoennCheck))))))
                .addContainerGap())
        );
        regionFilterPanelLayout.setVerticalGroup(
            regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regionFilterPanelLayout.createSequentialGroup()
                .addComponent(regionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kantoCheck)
                    .addComponent(johtoCheck)
                    .addComponent(hoennCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sinnohCheck)
                    .addComponent(unovaCheck)
                    .addComponent(kalosCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allRegionButton)
                    .addComponent(noRegionButton)))
        );

        collectionFilterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        collectionFilterPanel.setName("Collection Filter"); // NOI18N

        collectionLabel.setText("Collection Filters");
        collectionLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        caughtCheck.setSelected(true);
        caughtCheck.setText("Caught");
        caughtCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        wantCheck.setText("Want");
        wantCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        multiHaveCheck.setText("Have Multiple");
        multiHaveCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        seenCheck.setText("Seen");
        seenCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        tradeCheck.setText("Trade");
        tradeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        allCollectionButton.setText("All");
        allCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCollectionButtonActionPerformed(evt);
            }
        });

        noCollectionButton.setText("None");
        noCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCollectionButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Default");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultCollectionButton(evt);
            }
        });

        questionMarkLabel.setText("?");
        questionMarkLabel.setToolTipText("<html><p>Caught:   Shows all if enabled, only uncaught if disabled</p>\n<p>Have Multiple:    Shows all if disabled, only those with multiples if enabled</p>\n<p>Want:\t          Shows all if disabled, only those marked 'want' if enabled</p>\n<p>Trade:\t          Shows all if disabled, only those marked to trade if enabled</p>\n<p>Don't Have:       Shows all if disabled, only those uncaught if enabled</p>\n<p>Seen:                Shows all if disabled, only seen if enabled</p></html>");
        questionMarkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                questionMarkLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout collectionFilterPanelLayout = new javax.swing.GroupLayout(collectionFilterPanel);
        collectionFilterPanel.setLayout(collectionFilterPanelLayout);
        collectionFilterPanelLayout.setHorizontalGroup(
            collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                .addComponent(collectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionMarkLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                        .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(caughtCheck)
                            .addComponent(multiHaveCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                                .addComponent(wantCheck)
                                .addGap(31, 31, 31)
                                .addComponent(seenCheck))
                            .addComponent(tradeCheck))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                        .addComponent(allCollectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        collectionFilterPanelLayout.setVerticalGroup(
            collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collectionFilterPanelLayout.createSequentialGroup()
                .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectionLabel)
                    .addComponent(questionMarkLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caughtCheck)
                    .addComponent(wantCheck)
                    .addComponent(seenCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiHaveCheck)
                    .addComponent(tradeCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(collectionFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allCollectionButton)
                    .addComponent(noCollectionButton)
                    .addComponent(jButton2)))
        );

        titlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setText("Pok√©Dox");

        creditsLabel.setText("copyright 2015-2016 by Luke Stanley");
        creditsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                creditsLabelMouseClicked(evt);
            }
        });

        try{
        	iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("PokeBall_icon.png"))); // NOI18N
        }
        catch(Exception e){
            System.err.println("Error while reading Pokeball_icon.png: " + e.getMessage());
            System.exit(-1);
        }
        
        iconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout iconPanelLayout = new javax.swing.GroupLayout(iconPanel);
        iconPanel.setLayout(iconPanelLayout);
        iconPanelLayout.setHorizontalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        iconPanelLayout.setVerticalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTextField1.setEditable(false);
        jTextField1.setText("https://github.com/lukexorz/PokeDox");
        jTextField1.setBorder(null);
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    open(new URI(jTextField1.getText()));
                } catch (URISyntaxException ex) {
                    Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(titlePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creditsLabel)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(creditsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(iconPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tableScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        pokeTable.setModel(pokeList);
        pokeTable.getColumnModel().getColumn(3).setCellRenderer(new DexRenderer());
        pokeTable.getColumnModel().getColumn(4).setCellRenderer(new DexRenderer());
        pokeTable.getColumnModel().getColumn(5).setCellRenderer(new DexRenderer());
        pokeTable.getColumnModel().getColumn(6).setCellRenderer(new DexRenderer());
        pokeTable.getColumnModel().getColumn(7).setCellRenderer(new DexRenderer());
        pokeTable.setOpaque(false);
        DefaultCellEditor multipleEditor = (DefaultCellEditor) pokeTable.getDefaultEditor(pokeTable.getColumnClass(12));
        multipleEditor.setClickCountToStart(1);
        pokeTable.getTableHeader().setReorderingAllowed(false);
        JTableHeader header = pokeTable.getTableHeader();
        /**
        * A mouse listener class which is used to handle mouse clicking event
        * on column headers of a JTable.
        * @author http://www.codejava.net/java-se/swing/how-to-handle-mouse-clicking-event-on-jtable-column-header
        * as well as http://stackoverflow.com/questions/4615741/jtable-clickable-column-header
        * Hope that is is an acceptable citation
        */
        header.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                Point point = mouseEvent.getPoint();
                int index = pokeTable.columnAtPoint(point);
                if (index >= 0) {
                    //JOptionPane.showMessageDialog(pokeTable, "Column header #" + index + " is clicked");
                    pokeList.colSort(index);
                }
            };
        });
        pokeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pokeTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pokeTableMousePressed(evt);
            }
        });
        pokeTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pokeTablePropertyChange(evt);
            }
        });
        tableScrollPane.setViewportView(pokeTable);
        if (pokeTable.getColumnModel().getColumnCount() > 0) {
            pokeTable.getColumnModel().getColumn(0).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(0).setPreferredWidth(24);
            pokeTable.getColumnModel().getColumn(0).setMaxWidth(39);
            pokeTable.getColumnModel().getColumn(0).setHeaderValue("#");
            pokeTable.getColumnModel().getColumn(1).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            pokeTable.getColumnModel().getColumn(1).setMaxWidth(115);
            pokeTable.getColumnModel().getColumn(1).setHeaderValue("Name");
            pokeTable.getColumnModel().getColumn(2).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            pokeTable.getColumnModel().getColumn(2).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(2).setHeaderValue("Type");
            pokeTable.getColumnModel().getColumn(3).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(3).setPreferredWidth(47);
            pokeTable.getColumnModel().getColumn(3).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(3).setHeaderValue("Johto #");
            pokeTable.getColumnModel().getColumn(4).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(4).setPreferredWidth(45);
            pokeTable.getColumnModel().getColumn(4).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(4).setHeaderValue("Hoenn #");
            pokeTable.getColumnModel().getColumn(5).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(5).setPreferredWidth(45);
            pokeTable.getColumnModel().getColumn(5).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(5).setHeaderValue("Sinnoh #");
            pokeTable.getColumnModel().getColumn(6).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(6).setPreferredWidth(45);
            pokeTable.getColumnModel().getColumn(6).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(6).setHeaderValue("Unova #");
            pokeTable.getColumnModel().getColumn(7).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(7).setPreferredWidth(45);
            pokeTable.getColumnModel().getColumn(7).setMaxWidth(65);
            pokeTable.getColumnModel().getColumn(7).setHeaderValue("Kalos #");
            pokeTable.getColumnModel().getColumn(8).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(8).setPreferredWidth(45);
            pokeTable.getColumnModel().getColumn(8).setMaxWidth(45);
            pokeTable.getColumnModel().getColumn(8).setHeaderValue("Caught");
            pokeTable.getColumnModel().getColumn(9).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(9).setPreferredWidth(29);
            pokeTable.getColumnModel().getColumn(9).setMaxWidth(45);
            pokeTable.getColumnModel().getColumn(9).setHeaderValue("Seen");
            pokeTable.getColumnModel().getColumn(10).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(10).setPreferredWidth(33);
            pokeTable.getColumnModel().getColumn(10).setMaxWidth(45);
            pokeTable.getColumnModel().getColumn(10).setHeaderValue("Want");
            pokeTable.getColumnModel().getColumn(11).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(11).setPreferredWidth(29);
            pokeTable.getColumnModel().getColumn(11).setMaxWidth(45);
            pokeTable.getColumnModel().getColumn(11).setHeaderValue("Trade");
            pokeTable.getColumnModel().getColumn(12).setMinWidth(0);
            pokeTable.getColumnModel().getColumn(12).setPreferredWidth(16);
            pokeTable.getColumnModel().getColumn(12).setMaxWidth(60);
            pokeTable.getColumnModel().getColumn(12).setHeaderValue("Multiples");
            pokeTable.getColumnModel().getColumn(0).setResizable(true);
            pokeTable.getColumnModel().getColumn(1).setResizable(true);
            pokeTable.getColumnModel().getColumn(2).setResizable(true);
            pokeTable.getColumnModel().getColumn(3).setResizable(true);
            pokeTable.getColumnModel().getColumn(4).setResizable(true);
            pokeTable.getColumnModel().getColumn(5).setResizable(true);
            pokeTable.getColumnModel().getColumn(6).setResizable(true);
            pokeTable.getColumnModel().getColumn(7).setResizable(true);
            pokeTable.getColumnModel().getColumn(8).setResizable(true);
            pokeTable.getColumnModel().getColumn(9).setResizable(true);
            pokeTable.getColumnModel().getColumn(10).setResizable(true);
            pokeTable.getColumnModel().getColumn(11).setResizable(true);
            pokeTable.getColumnModel().getColumn(12).setResizable(true);
        }
        //TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(pokeTable.getModel());
        //pokeTable.setRowSorter(sorter);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
        );

        typeFiltersPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        typeFiltersLabel.setText("Type Filters");
        typeFiltersLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        normalBox.setSelected(true);
        normalBox.setText("Normal");
        normalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        fireBox.setSelected(true);
        fireBox.setText("Fire");
        fireBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        groundBox.setSelected(true);
        groundBox.setText("Ground");
        groundBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        psychicBox.setSelected(true);
        psychicBox.setText("Psychic");
        psychicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        fightingBox.setSelected(true);
        fightingBox.setText("Fighting");
        fightingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        waterBox.setSelected(true);
        waterBox.setText("Water");
        waterBox.setToolTipText("");
        waterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        rockBox.setSelected(true);
        rockBox.setText("Rock");
        rockBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        iceBox.setSelected(true);
        iceBox.setText("Ice");
        iceBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        flyingBox.setSelected(true);
        flyingBox.setText("Flying");
        flyingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        grassBox.setSelected(true);
        grassBox.setText("Grass");
        grassBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        bugBox.setSelected(true);
        bugBox.setText("Bug");
        bugBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        dragonBox.setSelected(true);
        dragonBox.setText("Dragon");
        dragonBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        poisonBox.setSelected(true);
        poisonBox.setText("Poison");
        poisonBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        electricBox.setSelected(true);
        electricBox.setText("Electric");
        electricBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        ghostBox.setSelected(true);
        ghostBox.setText("Ghost");
        ghostBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        darkBox.setSelected(true);
        darkBox.setText("Dark");
        darkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        steelBox.setSelected(true);
        steelBox.setText("Steel");
        steelBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        fairyBox.setSelected(true);
        fairyBox.setText("Fairy");
        fairyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        allTypeButton.setText("Select All");
        allTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTypeButtonActionPerformed(evt);
            }
        });

        noTypeButton.setText("Select None");
        noTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noTypeButtonActionPerformed(evt);
            }
        });

        strictBox.setText("Strict Match");
        strictBox.setToolTipText("If checked, will exclude unselected types, even if second type is permitted");
        strictBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        singleOnlyBox.setText("Single-type Only");
        singleOnlyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleOnlyBoxActionPerformed(evt);
            }
        });

        dualOnlyBox.setText("Dual-type only");
        dualOnlyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dualOnlyBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout typeFiltersPanelLayout = new javax.swing.GroupLayout(typeFiltersPanel);
        typeFiltersPanel.setLayout(typeFiltersPanelLayout);
        typeFiltersPanelLayout.setHorizontalGroup(
            typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fightingBox)
                    .addComponent(flyingBox)
                    .addComponent(poisonBox)
                    .addComponent(normalBox)
                    .addComponent(steelBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                        .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(electricBox)
                                    .addComponent(grassBox)
                                    .addComponent(waterBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bugBox, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ghostBox, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rockBox, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                                .addComponent(fireBox)
                                .addGap(16, 16, 16)
                                .addComponent(groundBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dragonBox)
                            .addComponent(iceBox)
                            .addComponent(psychicBox)
                            .addComponent(darkBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                        .addComponent(fairyBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allTypeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noTypeButton))))
            .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                        .addComponent(strictBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(singleOnlyBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dualOnlyBox))
                    .addComponent(typeFiltersLabel))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        typeFiltersPanelLayout.setVerticalGroup(
            typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeFiltersPanelLayout.createSequentialGroup()
                .addComponent(typeFiltersLabel)
                .addGap(8, 8, 8)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalBox)
                    .addComponent(fireBox)
                    .addComponent(groundBox)
                    .addComponent(psychicBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fightingBox)
                    .addComponent(waterBox)
                    .addComponent(rockBox)
                    .addComponent(iceBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flyingBox)
                    .addComponent(grassBox)
                    .addComponent(bugBox)
                    .addComponent(dragonBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poisonBox)
                    .addComponent(electricBox)
                    .addComponent(ghostBox)
                    .addComponent(darkBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(steelBox)
                    .addComponent(fairyBox)
                    .addComponent(allTypeButton)
                    .addComponent(noTypeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(typeFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strictBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleOnlyBox)
                    .addComponent(dualOnlyBox)))
        );

        selectionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        selectedLabel.setText("Mark selected as...");
        selectedLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        setCaughtBox.setSelected(true);
        setCaughtBox.setText("Caught");

        markWantBox.setSelected(true);
        markWantBox.setText("Want");

        markTradeBox.setSelected(true);
        markTradeBox.setText("Trade");

        markSeenBox.setSelected(true);
        markSeenBox.setText("Seen");

        markWantButton.setText("Mark...");
        markWantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markWantButtonActionPerformed(evt);
            }
        });

        markCaughtButton.setText("Mark...");
        markCaughtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markCaughtButtonActionPerformed(evt);
            }
        });

        markNotSeenButton.setText("Mark...");
        markNotSeenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markNotSeenButtonActionPerformed(evt);
            }
        });

        markNotTradeButton.setText("Mark...");
        markNotTradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markNotTradeButtonActionPerformed(evt);
            }
        });

        setMultipleField.setText("1");
        setMultipleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMultipleFieldActionPerformed(evt);
            }
        });

        setMultipleButton.setText("Set Multiples");
        setMultipleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMultipleButtonActionPerformed(evt);
            }
        });

        selectionAllButton.setText("Apply all to selected");
        selectionAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectionPanelLayout = new javax.swing.GroupLayout(selectionPanel);
        selectionPanel.setLayout(selectionPanelLayout);
        selectionPanelLayout.setHorizontalGroup(
            selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPanelLayout.createSequentialGroup()
                .addComponent(selectedLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(selectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, selectionPanelLayout.createSequentialGroup()
                        .addComponent(setMultipleField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setMultipleButton))
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(markWantBox)
                            .addComponent(setCaughtBox))
                        .addGap(14, 14, 14)
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(markWantButton)
                            .addComponent(markCaughtButton))
                        .addGap(25, 25, 25)))
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addComponent(markSeenBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(markNotSeenButton))
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addComponent(markTradeBox)
                        .addGap(18, 18, 18)
                        .addComponent(markNotTradeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(selectionAllButton)))
                .addContainerGap())
        );
        selectionPanelLayout.setVerticalGroup(
            selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPanelLayout.createSequentialGroup()
                .addComponent(selectedLabel)
                .addGap(18, 18, 18)
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setCaughtBox)
                            .addComponent(markCaughtButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markWantButton)
                            .addComponent(markWantBox)))
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markSeenBox)
                            .addComponent(markNotSeenButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markTradeBox)
                            .addComponent(markNotTradeButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setMultipleButton)
                    .addComponent(setMultipleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectionAllButton))
                .addContainerGap())
        );

        pokePicPanel.setBackground(new java.awt.Color(255, 255, 255));
        pokePicPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pokePicPanel.setForeground(new java.awt.Color(255, 255, 255));
        pokePicPanel.setToolTipText("");

        imgLabel.setBackground(new java.awt.Color(255, 255, 255));
        imgLabel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pokePicPanelLayout = new javax.swing.GroupLayout(pokePicPanel);
        pokePicPanel.setLayout(pokePicPanelLayout);
        pokePicPanelLayout.setHorizontalGroup(
            pokePicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pokePicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pokePicPanelLayout.setVerticalGroup(
            pokePicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pokePicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );

        try
        {
            masterImg = ImageIO.read(this.getClass().getResourceAsStream("pokemon_icondex.png"));
        }
        catch (IOException e) {
        }

        selectedPokemonLabel.setText("Selected Pok√©mon");

        searchLabel.setText("Pok√©mon Search by name:");

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        allOrEvoFamRadioSelectionGroup.add(allPokemonButton);
        allPokemonButton.setSelected(true);
        allPokemonButton.setText("All Pokemon");
        allPokemonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPokemonButtonActionPerformed(evt);
            }
        });

        allOrEvoFamRadioSelectionGroup.add(evoFamButton);
        evoFamButton.setText("By Evolution Family");
        evoFamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evoFamButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        pokeCountLabel.setText("Pokemon currently listed: ");

        pokeCountOutLabel.setText("721");

        helpButton.setText("Help ");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(regionFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collectionFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(typeFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pokePicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectedPokemonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(allPokemonButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(evoFamButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pokeCountLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pokeCountOutLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveButton)
                                    .addComponent(helpButton))))))
                .addGap(12, 12, 12)
                .addComponent(pokePicLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(collectionFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regionFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pokePicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pokePicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedPokemonLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allPokemonButton)
                            .addComponent(evoFamButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchLabel)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pokeCountLabel)
                            .addComponent(pokeCountOutLabel))))
                .addGap(7, 7, 7)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCollectionButtonActionPerformed
       
        wantCheck.setSelected(true);
        multiHaveCheck.setSelected(true);
        caughtCheck.setSelected(true);
        tradeCheck.setSelected(true);
        seenCheck.setSelected(true);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
        
    }//GEN-LAST:event_allCollectionButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        
      //  unused
    }//GEN-LAST:event_formComponentResized

    private void allRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRegionButtonActionPerformed
        //
        // set kanto, johto, hoenn, sinnoh, unova, and kalos boxes to true
        kantoCheck.setSelected(true);
        johtoCheck.setSelected(true);
        hoennCheck.setSelected(true);
        sinnohCheck.setSelected(true);
        unovaCheck.setSelected(true);
        kalosCheck.setSelected(true);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_allRegionButtonActionPerformed

    private void noRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRegionButtonActionPerformed
      
        kantoCheck.setSelected(false);
        johtoCheck.setSelected(false);
        hoennCheck.setSelected(false);
        sinnohCheck.setSelected(false);
        unovaCheck.setSelected(false);
        kalosCheck.setSelected(false);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_noRegionButtonActionPerformed

    private void noCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noCollectionButtonActionPerformed
        
        wantCheck.setSelected(false);
        multiHaveCheck.setSelected(false);
        caughtCheck.setSelected(false);
        tradeCheck.setSelected(false);
        seenCheck.setSelected(false);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_noCollectionButtonActionPerformed

    private void setMultipleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMultipleFieldActionPerformed
        // probably unused? setMultipleField is the button we use here instead
    }//GEN-LAST:event_setMultipleFieldActionPerformed

    private void selectionAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionAllButtonActionPerformed
       int[] indices = pokeTable.getSelectedRows();
       for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToCaught(indices[i], setCaughtBox.isSelected());
        }
       
       for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToWant(indices[i], markWantBox.isSelected());
        }
       
       for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToSeen(indices[i], markSeenBox.isSelected());
        }
       
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToTrade(indices[i], markTradeBox.isSelected());
        }
        
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setMultiplesNumber(indices[i], setMultipleField.getText());
        }
    }//GEN-LAST:event_selectionAllButtonActionPerformed

    private void markCaughtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markCaughtButtonActionPerformed
        
        int[] indices = pokeTable.getSelectedRows();
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToCaught(indices[i], setCaughtBox.isSelected());
        }
    }//GEN-LAST:event_markCaughtButtonActionPerformed

    private void markWantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markWantButtonActionPerformed
        
        int[] indices = pokeTable.getSelectedRows();
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToWant(indices[i], markWantBox.isSelected());
        }
    }//GEN-LAST:event_markWantButtonActionPerformed

    private void defaultCollectionButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultCollectionButton
      
        wantCheck.setSelected(false);
        multiHaveCheck.setSelected(false);
        caughtCheck.setSelected(true);
        tradeCheck.setSelected(false);
        seenCheck.setSelected(false);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_defaultCollectionButton

    private void noTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noTypeButtonActionPerformed
        normalBox.setSelected(false);
        fightingBox.setSelected(false);
        flyingBox.setSelected(false);
        poisonBox.setSelected(false);
        steelBox.setSelected(false);
        fireBox.setSelected(false);
        waterBox.setSelected(false);
        grassBox.setSelected(false);
        electricBox.setSelected(false);
        fairyBox.setSelected(false);
        groundBox.setSelected(false);
        rockBox.setSelected(false);
        bugBox.setSelected(false);
        ghostBox.setSelected(false);
        psychicBox.setSelected(false);
        iceBox.setSelected(false);
        dragonBox.setSelected(false);
        darkBox.setSelected(false);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_noTypeButtonActionPerformed

    private void allTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTypeButtonActionPerformed
        normalBox.setSelected(true);
        fightingBox.setSelected(true);
        flyingBox.setSelected(true);
        poisonBox.setSelected(true);
        steelBox.setSelected(true);
        fireBox.setSelected(true);
        waterBox.setSelected(true);
        grassBox.setSelected(true);
        electricBox.setSelected(true);
        fairyBox.setSelected(true);
        groundBox.setSelected(true);
        rockBox.setSelected(true);
        bugBox.setSelected(true);
        ghostBox.setSelected(true);
        psychicBox.setSelected(true);
        iceBox.setSelected(true);
        dragonBox.setSelected(true);
        darkBox.setSelected(true);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_allTypeButtonActionPerformed


    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_checkBoxActionPerformed

    private void iconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseClicked
        
    
        if(this.getWidth() != 818)
            this.setSize(818, this.getHeight());
    }//GEN-LAST:event_iconLabelMouseClicked

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
       
        String searchKey = searchField.getText();
        pokeList.setSearchKey(searchKey);
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_searchFieldKeyReleased

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        pokeList.saveData();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!mainWindow.needsToSave) {
            System.exit(0);
        }
        
        int result = JOptionPane.showConfirmDialog(titlePanel, "Do you want to save your changes?", "Exiting program.", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if(result == JOptionPane.YES_OPTION)
        {
            pokeList.saveData();
            System.exit(0);
        }
        if(result == JOptionPane.NO_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void singleOnlyBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleOnlyBoxActionPerformed
        
        if(singleOnlyBox.isSelected())
        {
            dualOnlyBox.setSelected(false);
        }
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_singleOnlyBoxActionPerformed

    private void dualOnlyBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dualOnlyBoxActionPerformed
        
      
        if(dualOnlyBox.isSelected())
        {
            singleOnlyBox.setSelected(false);
        }
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_dualOnlyBoxActionPerformed

    private void markNotSeenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markNotSeenButtonActionPerformed
        int[] indices = pokeTable.getSelectedRows();
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToSeen(indices[i], markSeenBox.isSelected());
        }
    }//GEN-LAST:event_markNotSeenButtonActionPerformed

    private void markNotTradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markNotTradeButtonActionPerformed
        int[] indices = pokeTable.getSelectedRows();
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setToTrade(indices[i], markTradeBox.isSelected());
        }
    }//GEN-LAST:event_markNotTradeButtonActionPerformed

    private void setMultipleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMultipleButtonActionPerformed
        int[] indices = pokeTable.getSelectedRows();
        for(int i = 0; i < indices.length; i++)
        {
            pokeList.setMultiplesNumber(indices[i], setMultipleField.getText());
        }
    }//GEN-LAST:event_setMultipleButtonActionPerformed

    private void pokeTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pokeTablePropertyChange
        // unused
    }//GEN-LAST:event_pokeTablePropertyChange

    private void pokeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pokeTableMouseClicked

        Point point = evt.getPoint();
        int column = pokeTable.columnAtPoint(point);
        int row = pokeTable.rowAtPoint(point);
        
        
        if(pokeList.isCellEditable(row, column))
        {
            if(column == 8)
            {
                //    pokeList.flipValue(row, column);
            }
            if(column ==9)
            {
                //   pokeList.flipValue(row, column);
            }
            if(column == 10)
            {
                //     pokeList.flipValue(row, column);
            }
            if(column == 11)
            {
                //    pokeList.flipValue(row, column);
            }
            if(column == 12)
            {
                //    pokeList.changeCellAt(row, column,((EventObject) evt));
            }
        }
    }//GEN-LAST:event_pokeTableMouseClicked

    private void evoFamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evoFamButtonActionPerformed
        pokeCountLabel.setText("Families currently listed:"); 
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_evoFamButtonActionPerformed

    private void allPokemonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPokemonButtonActionPerformed
        pokeCountLabel.setText("Pokemon currently listed:"); 
        pokeCountOutLabel.setText(String.valueOf(pokeList.sort(getFilters())));
    }//GEN-LAST:event_allPokemonButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
           JOptionPane.showMessageDialog(regionFilterPanel, "Region Filters:\n ---These filter pokemon based on which regional Pokedex they are in.\n"
                                                          + "\nCollection Filters:\n ---These filter based on what user has set for each Pokemon's collection status.\n"
                                                        +   "---Click the question mark on that panel to read about each one.\n"
                                                           +"\nType filters:\n ---These filter out Pokemon based on type.\n ---If \"Strict Match\" is checked, unchecked types will be completely excluded.\n"
                                                         +  "\nMark Selected as...:\n ---These buttons will mark all selected Pokemon as the button next to them\n"
                                                           +"\nThere are also buttons to view only Pokemon evolution families, Save changes, view this help screen, or search by Pokemon name.");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void creditsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_creditsLabelMouseClicked
         JOptionPane.showMessageDialog(regionFilterPanel,"Credits:\n\nInspiration:    http://www.asmor.com/pokedex/ by Ian Toltz\n" +
                                                        "Pokemon icons:  http://krocf4.deviantart.com/art/Pokemon-ORAS-IconDex-398921766 by KrocF4\n" +
                                                        "Pokeball icon: http://pokemontowerdefensetwo.wikia.com/wiki/File:Pokeball_icon.png\n" +
                                                        "PokeDox: Created 2015-2016 by Luke Stanley");
    }//GEN-LAST:event_creditsLabelMouseClicked

    private void pokeTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pokeTableMousePressed
        // TODO add your handling code here:
                Point point = evt.getPoint();
        int column = pokeTable.columnAtPoint(point);
        int row = pokeTable.rowAtPoint(point);
        
        int natlDex = pokeList.getNatlDexAt(row);
        
        
        int imgY = (( (natlDex-1) / 27) * 33)+1;
        int imgX  = (( (natlDex -1 ) % 27) * 33)+1;

        img = masterImg.getSubimage(imgX, imgY, 32 ,32);
        
        img = img.getScaledInstance(80,80, SCALE_DEFAULT);
    //    Image notBuffered = 
        
        icon = new ImageIcon(img);
        imgLabel.setIcon(icon);
        
    }//GEN-LAST:event_pokeTableMousePressed

    private void questionMarkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionMarkLabelMouseClicked
        JOptionPane.showMessageDialog(regionFilterPanel,"Caught:   Shows all if enabled, only uncaught if disabled\n"
                                                        +"Have Multiple:    Shows all if disabled, only those with multiples if enabled\n"
                                                        +"Want:	          Shows all if disabled, only those marked 'want' if enabled\n"
                                                        +"Trade:	          Shows all if disabled, only those marked to trade if enabled\n"
                                                        +"Don't Have:       Shows all if disabled, only those uncaught if enabled\n"
                                                        +"Seen:                Shows all if disabled, only seen if enabled");
    }//GEN-LAST:event_questionMarkLabelMouseClicked
    
    boolean[] getFilters()
    {
        try {
            Thread.sleep(10);               // hopefully this will help with race conditions. Guess it is sloppy, but... 
        } catch (InterruptedException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        boolean[] vals = {kantoCheck.isSelected(), johtoCheck.isSelected(), hoennCheck.isSelected(), sinnohCheck.isSelected(), unovaCheck.isSelected(), kalosCheck.isSelected(), 
                          caughtCheck.isSelected(), wantCheck.isSelected(), seenCheck.isSelected(), multiHaveCheck.isSelected(), false, tradeCheck.isSelected(), 
                          normalBox.isSelected(), fightingBox.isSelected(), flyingBox.isSelected(), poisonBox.isSelected(),
                          groundBox.isSelected(), rockBox.isSelected(), bugBox.isSelected(), ghostBox.isSelected(),
                          steelBox.isSelected(), fireBox.isSelected(),waterBox.isSelected(), grassBox.isSelected(),
                          electricBox.isSelected(), psychicBox.isSelected(), iceBox.isSelected(), dragonBox.isSelected(),      
                          darkBox.isSelected(), fairyBox.isSelected(), strictBox.isSelected(), singleOnlyBox.isSelected(), dualOnlyBox.isSelected(), evoFamButton.isSelected() };
        return vals;
    }
    
    private static void open(URI uri) {
    if (Desktop.isDesktopSupported()) {
      try {
        Desktop.getDesktop().browse(uri);
      } catch (IOException e) { /* TODO: error handling */ }
    } else { /* TODO: error handling */ }
  }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */   try{UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());}
        catch(Exception e){}
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    /*    try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
     

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allCollectionButton;
    private javax.swing.ButtonGroup allOrEvoFamRadioSelectionGroup;
    private javax.swing.JRadioButton allPokemonButton;
    private javax.swing.JButton allRegionButton;
    private javax.swing.JButton allTypeButton;
    private javax.swing.JCheckBox bugBox;
    private javax.swing.JCheckBox caughtCheck;
    private javax.swing.JPanel collectionFilterPanel;
    private javax.swing.JLabel collectionLabel;
    private javax.swing.JLabel creditsLabel;
    private javax.swing.JCheckBox darkBox;
    private javax.swing.JCheckBox dragonBox;
    private javax.swing.JCheckBox dualOnlyBox;
    private javax.swing.JCheckBox electricBox;
    private javax.swing.JRadioButton evoFamButton;
    private javax.swing.JCheckBox fairyBox;
    private javax.swing.JCheckBox fightingBox;
    private javax.swing.JCheckBox fireBox;
    private javax.swing.JCheckBox flyingBox;
    private javax.swing.JCheckBox ghostBox;
    private javax.swing.JCheckBox grassBox;
    private javax.swing.JCheckBox groundBox;
    private javax.swing.JButton helpButton;
    private javax.swing.JCheckBox hoennCheck;
    private javax.swing.JCheckBox iceBox;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JPanel iconPanel;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox johtoCheck;
    private javax.swing.JCheckBox kalosCheck;
    private javax.swing.JCheckBox kantoCheck;
    private javax.swing.JButton markCaughtButton;
    private javax.swing.JButton markNotSeenButton;
    private javax.swing.JButton markNotTradeButton;
    private javax.swing.JCheckBox markSeenBox;
    private javax.swing.JCheckBox markTradeBox;
    private javax.swing.JCheckBox markWantBox;
    private javax.swing.JButton markWantButton;
    private javax.swing.JCheckBox multiHaveCheck;
    private javax.swing.JButton noCollectionButton;
    private javax.swing.JButton noRegionButton;
    private javax.swing.JButton noTypeButton;
    private javax.swing.JCheckBox normalBox;
    private javax.swing.JCheckBox poisonBox;
    private javax.swing.JLabel pokeCountLabel;
    private javax.swing.JLabel pokeCountOutLabel;
    private javax.swing.JLabel pokePicLabel;
    private javax.swing.JPanel pokePicPanel;
    private javax.swing.JTable pokeTable;
    private javax.swing.JCheckBox psychicBox;
    private javax.swing.JLabel questionMarkLabel;
    private javax.swing.JPanel regionFilterPanel;
    private javax.swing.JLabel regionLabel;
    private javax.swing.JCheckBox rockBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JCheckBox seenCheck;
    private javax.swing.JLabel selectedLabel;
    private javax.swing.JLabel selectedPokemonLabel;
    private javax.swing.JButton selectionAllButton;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JCheckBox setCaughtBox;
    private javax.swing.JButton setMultipleButton;
    private javax.swing.JTextField setMultipleField;
    private javax.swing.JCheckBox singleOnlyBox;
    private javax.swing.JCheckBox sinnohCheck;
    private javax.swing.JCheckBox steelBox;
    private javax.swing.JCheckBox strictBox;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JCheckBox tradeCheck;
    private javax.swing.JLabel typeFiltersLabel;
    private javax.swing.JPanel typeFiltersPanel;
    private javax.swing.JCheckBox unovaCheck;
    private javax.swing.JCheckBox wantCheck;
    private javax.swing.JCheckBox waterBox;
    // End of variables declaration//GEN-END:variables
    private Image img;
    private BufferedImage masterImg;
    ImageIcon icon;
    
    static class DexRenderer extends DefaultTableCellRenderer {
	    @Override
	    public Component getTableCellRendererComponent(JTable jTable, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
	        Component c = super.getTableCellRendererComponent(jTable, value, isSelected, hasFocus, row, column);
	        if (c instanceof JLabel && value instanceof Number) {
	            JLabel label = (JLabel) c;
	            label.setHorizontalAlignment(JLabel.RIGHT);
	            Number num = (Number) value;
                    int intValue = num.intValue();
                    
                    String text = String.valueOf(intValue);if(intValue == -1)
                        label.setText("");
	            else
                        label.setText(text);
	 
	        //    label.setForeground(num.doubleValue() < 0 ? Color.RED : Color.BLACK);
	        }
	        return c;
	    }
    }
}
